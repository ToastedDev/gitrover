---
import "../styles/global.css";
import "@fontsource/inter/variable.css";
import "@fontsource/jetbrains-mono/variable.css";

import Head from '../components/head.astro'
import Navbar from '../components/navbar.astro'
import Aside from '../components/docs/aside.astro'
import type { MarkdownHeading } from "astro";

interface Props {
  title: string; 
  slug: string;
  headings: MarkdownHeading[]
}

const { title, slug, headings } = Astro.props
---

<html lang="en">
  <Head {title} />
  <body class="flex min-h-screen flex-col bg-orange-950 text-slate-100 max-w-7xl mx-auto">
	  <Navbar sticky /> 
    <main class="grid w-full max-w-7xl flex-1 grid-cols-1 gap-4 md:grid-cols-[250px_auto] lg:grid-cols-[250px_auto_250px]">
      <aside id="grid-left" class="sticky top-20 col-span-1 hidden h-auto max-h-[calc(100vh-80px)] w-full flex-col justify-start overflow-y-auto bg-orange-950 pl-4 md:flex md:max-h-[calc(100vh-96px)] md:pl-0 md:[margin-inline-start:16px]">
        <Aside {slug} {headings} />  
      </aside> 
      <div class="col-span-1 lg:col-span-2 p-4">
        <slot />
      </div>
    </main>
	</body>
</html>

<script is:inline>
  // Toggle classes when items are in view
  document.querySelectorAll("article :is(h1,h2,h3)").forEach((h) => {
    new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          // have to do "All" here cause we render this component in pageContent for mobile too
          const tocItem = Array.from(
            document.querySelectorAll(`aside a[href="#${id}"]`),
          ).at(-1);
          // this occurs when the id = "toc-heading"
          if (!tocItem) return;

          if (entry.isIntersecting) {
            // get current all active elements
            const currentActiveElements = Array.from(
              document.querySelectorAll(
                `[data-active="true"]`,
              ),
            );

            // get current all parent active elements
            const currentActiveParentElements = Array.from(
              document.querySelectorAll(
                `[data-active="true"]`,
              ),
            );

            // if has active elements
            if (currentActiveElements.length) {
              // loop through all elements and remove class and attr
              for (const el of currentActiveElements) {
                el.removeAttribute("data-active");
              }
            }
            // if has active parent elements
            if (currentActiveParentElements.length) {
              // loop through all parent elements and remove class and attr
              for (const parentEl of currentActiveParentElements) {
                parentEl.removeAttribute(
                  "data-active",
                );
              }
            }
            // set data attr to active element also will helpful when need to remove active state
            tocItem.setAttribute("data-active", true);
            tocItem.parentElement.setAttribute(
              "data-active",
              true,
            );
          }
        });
      },
      {
        rootMargin: "-100px 0% -66%",
        threshold: 1,
      },
    ).observe(h);
  });
</script>

<script>
  const copySVG = `<svg width="1.3em" height="1.3em" viewBox="0 0 256 256"><path fill="currentColor" d="M216 36H88a4 4 0 0 0-4 4v44H40a4 4 0 0 0-4 4v128a4 4 0 0 0 4 4h128a4 4 0 0 0 4-4v-44h44a4 4 0 0 0 4-4V40a4 4 0 0 0-4-4Zm-52 176H44V92h120Zm48-48h-40V88a4 4 0 0 0-4-4H92V44h120Z"/></svg>`;

  // let titles = document.querySelectorAll(
  //   ".remark-code-title",
  // ) as NodeListOf<HTMLDivElement>;
  let blocks = document.querySelectorAll("pre");

  blocks.forEach((block) => {
    block.className = "relative flex w-full h-full";

    let copyButton = document.createElement("button");
    copyButton.className =
      "inline-flex absolute right-[.45em] top-[.5em] bg-orange-600/30 rounded px-1 py-1 text-sm text-slate-100 hover:bg-orange-600/40 focus:outline-none focus:shadow-outline";
    copyButton.innerHTML = copySVG;
    copyButton.addEventListener("click", () => {
      let text = "";
      const pre = copyButton.parentElement;
      let code = pre?.querySelector("code");
      if (code) {
        text = code.innerText;
      } else {
        const span = pre?.querySelector("span");
        if (span) {
          text = span.innerText;
        }
      }
      if (text) {
        try {
          navigator.clipboard.writeText(text);
        } catch (err) {
          console.error("Failed to copy: ", err);
        }
        copyButton.innerHTML = `<svg width="1.3em" height="1.3em" viewBox="0 0 256 256"><path fill="#22c55e" d="M104 192a8.5 8.5 0 0 1-5.7-2.3l-56-56a8.1 8.1 0 0 1 11.4-11.4l50.3 50.4L210.3 66.3a8.1 8.1 0 0 1 11.4 11.4l-112 112a8.5 8.5 0 0 1-5.7 2.3Z"/></svg>`;

        setTimeout(() => {
          copyButton.innerHTML = copySVG;
        }, 1000);
      }
    });

    block.appendChild(copyButton);
    block.setAttribute("tabindex", "0");
  });
</script>
